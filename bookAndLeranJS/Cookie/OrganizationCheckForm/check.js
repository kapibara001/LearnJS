/* ОСНОВНЫЕ ПРАВИЛА ФОРМИРОВАНИЯ РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ
    Проврка правильностьи введенных форм, их соответствие шаблонам или ограничениям - проверка достоверности форм.
    Для формы, которая обязательна к заполнению(должна содержать хотя бы пробел), нужно приписать required.
    
    Первый этап - указание правильных атрибутов для элементов формы(код html)
    Второй этап - контроль содержимого непосредственного перед его отправкой
        а) Перехват события onsubmit формы. Генерируется при нажатии input type="submit" или когда пользователь
           нажимает Enter */
{
    let form = document.getElementById("myform1");
    form.addEventListener("submit", checkForm);

    function checkForm(e) { // event или e (любое название, просто принято называть так) - содрежит детали
                                // перехваченного события
        e.preventDefault(); // Страничка не перезагружается
        let nameText = document.getElementById("name-inp").value;

        if (nameText.lenght > 0) {
            form.submit();
        } 
    }
}

/*      б)  Второй способ отменить автоматическую отправку формы состоит в отказе от элемента типа «submit»\
            и использовании  обычной  кнопки. Тогда событие onsubmit() не генерируется и отправка данных формы
            происходит в принудительном порядке в резульате вызова функции при нажатии:
                btn.onclick(ф-я)

    Третий этап проверки достоверности - обработка запроса на сервере, на который он был послан.
*/


/* 
    Регулярные выражения(Regular Expressions) - объект RegExp 
    Это мощнейший инструмент проверки строковых данных на соответствие определенным шаблонам.

    В терминологии рег.выр часто используются слова "шаблон", "маска", "флаг"(некоторые доп. условия).
    
    Шаблон регулярного выражения можно создать 2 способами:
        а) Литералом(выражение вида "/шаблон/флаги"). Не берется в ковычки. Начало - "/"
            let template1 = /\D/ - Шаблон: "\D", флаги не указаны
        б) Конструктором (конструкция вида new RegExp("шаблон", "флаги"))
            let template2 = new RegExp("\D", "g");
    Различия: 
        -Литеральные шаблоны являются константными, созданными на этапе написания программы
        -При помощи конструктора можно поменять шаблон во время выполнения программы, после каких-то
            проверок и прочего
            
*/

/*
    .test() - проверка строки на соответствие шаблону обеспечения регуларного выражения
    Результатом работы данного метода является true или false, часто используется в связке с if ... else
*/
{
    let template3 = /\D/; // Проверка на наиличие в проверяемой строке любой не-цифры
    if (template3.test("Dora123")) { // true
        console.log("Тест успешный. /\\D/. Не-цифры присутствуют в проверяемой строке");
    } else console.log("Тест неуспешный. Строка состоит только из цифр");

    // Простейшие шаблоны 
    let template4 = /1/; // Проверка на наличие хотя бы одной единицы в целой строке
    let string = 'Im 21 y.o';
    console.log(template4.test('123'), template4.test('234'), template4.test(string));
    //true false true


    let template5 = /12/; // Проверка на ниличие уже не чисел 1 и 2, а числа 12
    let string2 = 'Im 21 y.o';
    console.log(template5.test('123'), template5.test('234'), template5.test(string));
    // true false false
}

/* 
    Иногда нам надо проверить символы, для которых нет особого названичения.
    В таком случае мы можем создать что-то типа словаря допустимых значений сами.
    Делается это при помощи "[]". В этих скобках перечисляются символы, которые разрешены нами.
*/
{
    template1 = /[12]/;
    console.log(template1.test('123'), template1.test('234')); 
    // true true. Вывод такой потому что в этих строках уже должна совпать не комбиация, 
    // а хотя бы один знак из разрешенных символов, то есть местный ИЛИ должен сработать

    // В множестве допустимых интервалов можно указывать интервалы "от и до"
    let template2 = /[A_Z]/;
    console.log(template2.test("AZOOOOV"), template2.test("azov"));
    // true false

    let template3 = /[a-z1-4]/;
    console.log(template3.test('azov1'), template3.test(14), template3.test('Z!@'));
    // true true false
}

/* 
    Если символы наоборот не должны находится в стркое, то добавляется в начало шаблона 
    знак ^. Он имеет довйное значение:
        а) Если знак ^ находится за скобками - означает "начало строки" и является символом-якорем
        б) Если стоит внутри [] - обозначает символы, которых быть в строке не должно
        template123 = /[^123]/
*/
{
    // a)
    // let template = /^1/;
    console.log(/^1/.test('123'), /^1/.test('213'));
    //true false

    // б)
    let template = /[^a-z]/;
    console.log(template.test('aprivet'), template.test('aprivet!123')); 
    // false true
    
    let template1 = /[^123]/;
    console.log(template1.test('123'), template1.test('234')); 
    // false true
}

/* 
    Если ожидается какое-то количество идущих подряд определенных символов, то 
    применяются КВАНТИФИКАТОРЫ. После записи допустимого множества или отдельного символа,
    записывается один из некоторых квантификаторов. Действуют они только на ту группу 
    символов или только тот символ, который стоит перед квантификатором.
*/
{
    let template = /7{7}/; // Проверка на 7 идущих подряд цифр 7
    console.log(template.test('7777777'), template.test('1241241'));
    // true false
}

/* 
    В регулярных выражениях могут применяться символы-якоря. Они указывают на определенные 
    места в строке, например ^ - начало строки, & - конец строки.

    Например, если нужно убедиться, что строка начинается с символа "1", то применим 
    шаблон 
        let template = /^1/;
*/

/* 
    Как правило такие проверки не происходят на один символ. Чаще всего создаются сложные условия
*/
{
    let template = /^\+\d{12}$/
}