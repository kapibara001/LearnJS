/**
 * useReducer - –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ö—É–∫ –∏–∑ –±–∏–±–ª–µ–æ—Ç–µ–∫–∏ React. 
 * 
 * –≠—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ useState, –Ω–æ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ setState —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ—É–Ω–∫—Ü–∏—é-–¥–∏—Å–ø–µ—Ç—á–µ—Ä (dispatch), —á—Ç–æ–±—ã 
 * –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (action) –≤ —Ä–µ–¥—å—é—Å–µ—Ä (reducer), –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
 * 
 * –°–∏–Ω—Ç–∞–∫—Å–∏—Å: 
 *      const [state, dispatch] = useReducer(reducerFunction, initialState)
 * 
 *      state - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 *      dispatch - –¥–∏—Å–ø–µ—Ç—á–µ—Ä 
 *      reducer(state, action) ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ä–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ.
 * 
 * 
 */

import { useReducer } from "react";

// 1. –†–µ–¥—å—é—Å–µ—Ä-—Ñ—É–Ω–∫—Ü–∏—è
function counterReducer(state, action) {
    switch (action.type) {
        case 'increment':
            return { count: state.count + 1 };
        case 'decrement':
            return { count: state.count - 1 };
        case 'reset':
            return { count: 0 };
        default:
            return state;
    }
}
  
export function CounterWithReducer() {
    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è useReducer
    const [state, dispatch] = useReducer(counterReducer, { count: 0 });
  
    return (
        <div>
            <h1>–°—á—ë—Ç—á–∏–∫: {state.count}</h1>
            <button onClick={() => dispatch({ type: 'increment' })}>‚ûï</button>
            <button onClick={() => dispatch({ type: 'decrement' })}>‚ûñ</button>
            <button onClick={() => dispatch({ type: 'reset' })}>üîÅ</button>
        </div>
    );
}